// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  
  // Address fields
  address   String?
  city      String?
  zip       String?
  country   String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders    Order[]
  
  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  
  // Images
  image1      String
  image2      String?
  image3      String?
  
  // Product details
  category    String?
  sizes       String[] // JSON array for sizes like ["S", "M", "L", "XL"]
  colors      String[] // JSON array for colors
  
  // SEO & Meta
  slug        String?  @unique
  metaTitle   String?
  metaDescription String?
  
  // Status
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orderItems  OrderItem[]
  
  @@map("products")
}

model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique // Human readable order number
  
  // Customer info
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  
  // Guest customer info (if no user account)
  customerName    String?
  customerEmail   String
  
  // Shipping address
  shippingAddress String
  shippingCity    String
  shippingZip     String
  shippingCountry String
  
  // Order totals
  subtotal        Float
  shippingCost    Float    @default(0)
  tax             Float    @default(0)
  total           Float
  
  // Payment info
  stripeSessionId String?  @unique
  stripePaymentId String?
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Order status
  status          OrderStatus @default(PENDING)
  
  // Notes
  customerNotes   String?
  adminNotes      String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relations
  items           OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  
  // Order relation
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Product relation
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  
  // Item details
  productName  String  // Snapshot of product name at time of order
  productPrice Float   // Snapshot of product price at time of order
  quantity     Int
  size         String?
  color        String?
  
  // Calculated total for this item
  total        Float
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("order_items")
}

// Enums
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}